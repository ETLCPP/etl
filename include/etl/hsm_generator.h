/******************************************************************************
The MIT License(MIT)

Embedded Template Library.
https://github.com/ETLCPP/etl
https://www.etlcpp.com

Copyright(c) 2019 Pontus Astrom, 2004 Stefan Heinzmann

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files(the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions :

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
******************************************************************************/

/*[[[cog
import cog
cog.outl("//***************************************************************************")
cog.outl("// THIS FILE HAS BEEN AUTO GENERATED. DO NOT EDIT THIS FILE.")
cog.outl("//***************************************************************************")
]]]*/
/*[[[end]]]*/

//***************************************************************************
// To generate to header file, run this at the command line.
// Note: You will need Python and COG installed.
//
// python -m cogapp -d -e -ohsm.h -DHandlers=<n> hsm_generator.h
// Where <n> is the number of messages to support.
//
// e.g.
// To generate handlers for up to 16 events...
// python -m cogapp -d -e -ohsm.h -DHandlers=16 hsm_generator.h
//
// See generate.bat
//***************************************************************************

//
// \brief  Definitions, classes for designing hierarchical state machines
// \author Stefan Heinzmann, Pontus Astrom
// \date   2004-12-01, modified 2019-08-06
//
// The implementation is mostly taken from
// http://accu.org/index.php/journals/252 with small modifications to
// fix a few bugs, and add some additional UML statechart
// support. For instance, with this version it is possible to have a composite
// state as target for a transaction.

#ifndef ETL_HSM_INCLUDED
#define ETL_HSM_INCLUDED

#include "message_router.h"

namespace etl {
namespace state {

// ------------------------------------------------------------------------------------------
// Top
// ------------------------------------------------------------------------------------------
template<typename H>
struct Top
{
   typedef H Hsm;
   virtual void process_event(etl::imessage_router &, etl::imessage const &, Hsm &) const = 0;
   virtual unsigned get_id() const = 0;
};

/*[[[cog
import cog

def message_types(prefix, msgs, nfirstline, notherlines, suffix=''):
   sep = ','
   s = ''
   for sx in range(msgs):
      linebreak = (sx - nfirstline) % notherlines == 0
      if linebreak:
         s += '{}\n{:>9}{}{}{}'.format(sep, '', prefix, sx, suffix)
      else:
         s += '{} {}{}{}'.format(sep, prefix, sx, suffix)
   s += '>'
   return s

def typename_M_eq_void(n):
   return message_types(prefix='typename M', msgs=n, nfirstline=2, notherlines=4, suffix=' = void')

def typename_M(n):
   return message_types(prefix='typename M', msgs=n, nfirstline=2, notherlines=4)

def M(n):
   return message_types(prefix='M', msgs=n, nfirstline=16, notherlines=24)

def header_comment(text):
   cog.outl('\n// ------------------------------------------------------------------------------------------')
   cog.outl('// {}'.format(text))
   cog.outl('// ------------------------------------------------------------------------------------------')

def create_class(classname, is_declaration, is_topspec, is_leaf, n):
   if is_declaration:
      cog.outl('template<typename H, unsigned ID, typename P = Composite<H, 0, Top<H> >{}'.format(typename_M(n)))
      cog.outl('class {} : public P'.format(classname))
   else:
      if not is_topspec:
         cog.outl('template<typename H, unsigned ID, typename P{}'.format(typename_M(n)))
         cog.outl('class {}<H, ID, P{} : public P'.format(classname, M(n)))
      else:
         cog.outl('template<typename H>')
         cog.outl('class {}<H, 0> : public Top<H>'.format(classname))
   cog.outl('{')

   cog.outl('public:')
   cog.outl('   typedef H Hsm;')

   if is_topspec:
      cog.outl('   typedef Top<H> Parent;')
      cog.outl('   typedef {}<H, 0, Top<H> > Self;'.format(classname))
   else:
      cog.outl('   typedef P Parent;')
      cog.outl('   typedef {}<H, ID, P{} Self;'.format(classname, M(n)))

   cog.outl('\n   static void handle_entry(Hsm &) {}')
   cog.outl('   static void handle_exit(Hsm &) {}')

   if not is_leaf:
      cog.outl('   static void handle_init(Hsm &);')
   else:
      cog.outl('   static void handle_init(Hsm & arg)')
      cog.outl('   {\n       arg.set_state(obj);\n   }')

      cog.outl('\n   static const {} obj;\n'.format(classname))

      cog.outl('   virtual unsigned get_id() const')
      cog.outl('   {\n      return ID;\n   }')
      cog.outl('   virtual void process_event(etl::imessage_router & source,')
      cog.outl('                              etl::imessage  const & message,')
      cog.outl('                              Hsm                  & h) const')
      cog.outl('   {\n      handle_event(source, message, h, *this);\n   };')

   cog.outl('\n   template<typename LEAF>')
   cog.outl('   void handle_event(etl::imessage_router & source, etl::imessage const & message,')
   cog.outl('                     Hsm & h, LEAF const & l) const')
   cog.outl('   {')
   if n > 0:
      cog.outl('      switch (message.message_id)')
      cog.outl('      {')

   for t in range(n):
      cog.outl('         case M{}::ID: on_event<LEAF>(source, static_cast<M{} const &>(message), h, l); return;'.format(t, t))
   if n > 0:
      cog.outl('      }')

   if not is_topspec:
      cog.outl('      Parent::handle_event(source, message, h, l);')
   cog.outl('   }')

   if n > 0:
      cog.outl('\nprivate:')

   for t in range(n):
      cog.outl('   template<typename LEAF>')
      cog.outl('   void on_event(etl::imessage_router &, M%d const &, Hsm &, LEAF const &) const;' % t)

   cog.outl('};')

   if is_leaf:
      cog.outl('\ntemplate<typename H, unsigned ID, typename P{}'.format(typename_M(n)))
      cog.outl('const {c}<H, ID, P{m}\n      {c}<H, ID, P{m}::obj;'.format(c = classname, m = M(n)))

################################################################################
# Creating classes here
################################################################################
h = int(Handlers)

header_comment('Composite declaration for {} messages'.format(h))
cog.outl('template<typename H, unsigned ID, typename P{}'.format(typename_M_eq_void(h)))
cog.outl('class {};\n'.format('Composite'))

create_class('Composite', is_declaration=True, is_topspec=False, is_leaf=False, n=h)

header_comment('Composite specialisation for top-state which has class Top as parent')
create_class('Composite', is_declaration=False, is_topspec=True, is_leaf=False, n=0)

for i in range(h - 1, -1, -1):
   header_comment('Composite specialisation for {} messages'.format(i))
   create_class('Composite', is_declaration=False, is_topspec=False, is_leaf=False, n=i)

header_comment('Leaf declaration for {} messages'.format(h))
cog.outl('template<typename H, unsigned ID, typename P{}'.format(typename_M_eq_void(h)))
cog.outl('class {};\n'.format('Leaf'))

create_class('Leaf', is_declaration=True, is_topspec=False, is_leaf=True, n=h)

for i in range(h - 1, -1, -1):
   header_comment('Leaf specialisation for {} messages'.format(i))
   create_class('Leaf', is_declaration=False, is_topspec=False, is_leaf=True, n = i)

]]]*/
/*[[[end]]]*/


// ------------------------------------------------------------------------------------------
// Init
// ------------------------------------------------------------------------------------------
template<typename C>
struct Init
{
   typedef C Child;
   typedef typename C::Hsm Hsm;
   Init(Hsm & arg) : _hsm(arg) { };
   ~Init()
      {
         Child::handle_entry(_hsm);
         Child::handle_init (_hsm);
      }
   Hsm & _hsm;
};

// ------------------------------------------------------------------------------------------
// Is_child
// See GOTW #71 for design
// ------------------------------------------------------------------------------------------
template<typename C, typename P>
struct Is_child
{
private:
   typedef C Child;
   typedef P Parent;
   class  Yes { char a[1]; };
   class  No  { char a[5]; };
   static Yes test(Parent *); // undefined
   static No  test(...);      // undefined

public:
   enum { Res =
      sizeof(test(static_cast<Child *>(0))) == sizeof(Yes) ? 1 : 0 };
};

// ------------------------------------------------------------------------------------------
// Bool
// ------------------------------------------------------------------------------------------
template<bool> class Bool { };

// ------------------------------------------------------------------------------------------
// Transition
// ------------------------------------------------------------------------------------------
template<typename C, typename S, typename T>
struct Transition
{
   typedef C Current;
   typedef S Source;
   typedef T Target;
   typedef typename Current::Hsm Hsm;
   typedef typename Current::Parent Current_parent;
   typedef typename Target::Parent Target_parent;

   enum // work out when to terminate template recursion
   {
      eTB_CB    = Is_child<Target_parent, Current_parent>::Res,
      eS_CB     = Is_child<Source       , Current_parent>::Res,
      eS_C      = Is_child<Source       , Current       >::Res,
      eC_S      = Is_child<Current      , Source        >::Res,
      exitStop  = eTB_CB && eS_C,
      entryStop = eS_C || (eS_CB && !eC_S)
   };

   Transition(Hsm & arg)
      : _hsm(arg)
   {
      exit_actions(_hsm, Bool<false>());
   }

   ~Transition()
   {
      typedef Transition<Target, Source, Target> Trans;
      Trans::entry_actions(_hsm, Bool<false>());
      Target::handle_init(_hsm);
   }

   // We use overloading to stop recursion. The more natural template
   // specialization method would require to specialize the inner
   // template without specializing the outer one, which is
   // forbidden.
   static void exit_actions (Hsm &, Bool<true>) {}
   static void exit_actions (Hsm & h, Bool<false>)
   {
      typedef Transition<Current_parent, Source, Target> Trans;
      Current::handle_exit(h);
      Trans::exit_actions(h, Bool<exitStop>());
   };

   static void entry_actions(Hsm &, Bool<true >) {}
   static void entry_actions(Hsm & h, Bool<false>)
   {
      typedef Transition<Current_parent, Source, Target> Trans;
      Trans::entry_actions(h, Bool<entryStop>());
      Current::handle_entry(h);
   };

private:
   Hsm & _hsm;
};

} // namespace state

// ------------------------------------------------------------------------------------------
// hsm: The base class for the finite state machine
// ------------------------------------------------------------------------------------------
template<typename DERIVED_HSM>
class hsm : public etl::imessage_router
{
public:
   typedef DERIVED_HSM derived_hsm;
   typedef state::Top<derived_hsm> state;

   // Construction / destruction
   hsm(etl::message_router_id_t id)
      : etl::imessage_router(id),
      _state (nullptr)
   {
   };

   // Accepts everything but sinks unhandled messages
   bool is_started() const
   {
      return _state != nullptr;
   };

   bool accepts(etl::message_id_t) const
   {
      return true;
   };

   bool is_null_router() const
   {
      return false;
   };

   state const * get_state () const
   {
      return _state;
   };

   void set_state(state const & arg)
   {
      _state = & arg;
   };

private:
   const state * _state;
};

} // namespace etl

#endif // ETL_HSM_INCLUDED
